// src/commands.js ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Telegram-–∫–æ–º–∞–Ω–¥

const { sendTelegramMessageWithRetry } = require('./telegram');
const { state, isAdmin, setMainChat } = require('./state');
const { escapeHtml } = require('./utils');
const { DEBUG_CHAT_ID, BOT_VERSION } = require('./config');

function registerCommands(bot) {
  bot.onText(/^\/help$/, async (msg) => {
    const text = [
      'üëã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:',
      '/status ‚Äî —Å—Ç–∞—Ç—É—Å',
      '/help ‚Äî –ø–æ–º–æ—â—å',
      '/my_chat_id ‚Äî ID —á–∞—Ç–∞',
      '/whoami ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ',
      '/ping ‚Äî –∑–∞–¥–µ—Ä–∂–∫–∞',
      '/version ‚Äî –≤–µ—Ä—Å–∏—è –∏ –∞–ø—Ç–∞–π–º',
      '/test_notification ‚Äî —Ç–µ—Å—Ç (–∞–¥–º–∏–Ω)',
      '/list_events ‚Äî —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π (–∞–¥–º–∏–Ω)',
      '/toggle_event <—Ç–∏–ø> ‚Äî –≤–∫–ª/–≤—ã–∫–ª —Å–æ–±—ã—Ç–∏–µ (–∞–¥–º–∏–Ω)',
      '/set_main_chat <id> ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç (–∞–¥–º–∏–Ω)',
      '/send_main <—Ç–µ–∫—Å—Ç> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π (–∞–¥–º–∏–Ω)'
    ].join('\n');
    await sendTelegramMessageWithRetry(msg.chat.id, text);
  });

  bot.onText(/^\/status$/, msg =>
    sendTelegramMessageWithRetry(msg.chat.id, '‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω.')
  );

  bot.onText(/^\/my_chat_id$/, msg =>
    sendTelegramMessageWithRetry(msg.chat.id, `ID: <code>${msg.chat.id}</code>`, { parse_mode: 'HTML' })
  );

  bot.onText(/^\/whoami$/, msg => {
    const u = msg.from || {};
    const lines = [
      `–¢—ã: <b>${escapeHtml([u.first_name, u.last_name].filter(Boolean).join(' ') || '‚Äî')}</b>`,
      `username: @${u.username || '‚Äî'}`,
      `id: <code>${u.id}</code>`,
      `is_admin: <b>${isAdmin(u.id)}</b>`
    ];
    sendTelegramMessageWithRetry(msg.chat.id, lines.join('\n'), { parse_mode: 'HTML' });
  });

  bot.onText(/^\/ping$/, async (msg) => {
    const t0 = Date.now();
    const m = await bot.sendMessage(msg.chat.id, 'pong‚Ä¶');
    const dt = Date.now() - t0;
    await bot.editMessageText(`üèì pong (${dt}ms)`, { chat_id: m.chat.id, message_id: m.message_id });
  });

  bot.onText(/^\/version$/, msg => {
    const started = global.__BOT_STARTED_AT || new Date();
    const uptimeSec = Math.floor((Date.now() - started.getTime()) / 1000);
    const lines = [
      `üü¢ –í–µ—Ä—Å–∏—è: <b>${BOT_VERSION}</b>`,
      `–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç: <code>${state.CURRENT_MAIN_CHAT_ID}</code>`,
      `Uptime: ${uptimeSec}s`
    ];
    sendTelegramMessageWithRetry(msg.chat.id, lines.join('\n'), { parse_mode: 'HTML' });
  });

  // ==== –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ====
  bot.onText(/^\/test_notification$/, msg => {
    if (!isAdmin(msg.from?.id)) return;
    sendTelegramMessageWithRetry(DEBUG_CHAT_ID || msg.chat.id, 'üîî –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ OK');
  });

  bot.onText(/^\/list_events$/, msg => {
    if (!isAdmin(msg.from?.id)) return;
    const lines = ['‚ú® –°—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏–π:'];
    Object.keys(state.eventToggleState).sort().forEach(t => {
      lines.push(`${t}: ${state.eventToggleState[t] ? '‚úÖ' : '‚ùå'}`);
    });
    sendTelegramMessageWithRetry(msg.chat.id, lines.join('\n'));
  });

  bot.onText(/^\/toggle_event\s+(\S+)$/, (msg, m) => {
    if (!isAdmin(msg.from?.id)) return;
    const key = m[1];
    if (!(key in state.eventToggleState)) {
      sendTelegramMessageWithRetry(msg.chat.id, `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: <code>${escapeHtml(key)}</code>`, { parse_mode: 'HTML' });
      return;
    }
    state.eventToggleState[key] = !state.eventToggleState[key];
    sendTelegramMessageWithRetry(msg.chat.id, `${key}: ${state.eventToggleState[key] ? '‚úÖ –≤–∫–ª—é—á–µ–Ω–æ' : '‚ùå –æ—Ç–∫–ª—é—á–µ–Ω–æ'}`);
  });

  bot.onText(/^\/set_main_chat\s+(-?\d+)$/, (msg, m) => {
    if (!isAdmin(msg.from?.id)) return;
    setMainChat(m[1]);
    sendTelegramMessageWithRetry(msg.chat.id, `–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç: <code>${state.CURRENT_MAIN_CHAT_ID}</code>`, { parse_mode: 'HTML' });
  });

  bot.onText(/^\/send_main\s+([\s\S]+)$/, (msg, m) => {
    if (!isAdmin(msg.from?.id)) return;
    const text = m[1].trim();
    if (!text) return;
    sendTelegramMessageWithRetry(state.CURRENT_MAIN_CHAT_ID, text);
    sendTelegramMessageWithRetry(msg.chat.id, '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
  });

  // –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  bot.on('message', async (msg) => {
    if (!msg.text) return;
    if (/^\//.test(msg.text) && !/^\/(help|status|my_chat_id|whoami|ping|version|test_notification|list_events|toggle_event|set_main_chat|send_main)\b/.test(msg.text)) {
      await sendTelegramMessageWithRetry(msg.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–ø–∏—à–∏ /help');
    }
  });
}

module.exports = { registerCommands };

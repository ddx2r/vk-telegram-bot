// server.js ‚Äî HTTP-—Å–∫–ª–µ–π–∫–∞ –∏ –º–∞—Ä—à—Ä—É—Ç—ã

const express = require('express');
const bodyParser = require('body-parser');

const {
  VK_GROUP_ID,
  VK_SECRET_KEY,
  DEBUG_CHAT_ID,
  BOT_VERSION
} = require('./src/config');

const { bot, sendTelegramMessageWithRetry } = require('./src/telegram');
const { registerCommands } = require('./src/commands');
const { shouldProcessEvent, rememberEvent } = require('./src/vk/dedup');
const { handleVkEvent } = require('./src/vk/events');

// –õ–æ–≥–≥–µ—Ä Supabase
const { withRequestId, logMiddlewareTelegram, logMiddlewareVK, logger, logError } = require('./src/lib/logger');

const app = express();
// VK —à–ª—ë—Ç JSON; —É–≤–µ–ª–∏—á–∏–º –ª–∏–º–∏—Ç –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
app.use(bodyParser.json({ limit: '2mb' }));
app.use(withRequestId());

// –∞–ø—Ç–∞–π–º
global.__BOT_STARTED_AT = new Date();

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ —Ç–≥
registerCommands(bot);

// health
app.get('/health', (req, res) => {
  const up = Math.floor((Date.now() - (global.__BOT_STARTED_AT?.getTime() || Date.now())) / 1000);
  res.status(200).json({ ok: true, uptime_sec: up, ts: new Date().toISOString() });
});

// Telegram webhook
app.post('/telegram', logMiddlewareTelegram(), async (req, res) => {
  try {
    await bot.handleUpdate(req.body, res);
  } catch (err) {
    logError('telegram', 'webhook', err, { payload: req.body });
    res.sendStatus(500);
  }
});

// –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ VK + –æ–±—Ä–∞–±–æ—Ç–∫–∞
async function vkWebhookHandler(req, res) {
  const body = req.body || {};
  const { type, object, group_id, secret } = body;

  // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ VK ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–≤–µ—á–∞–µ–º ok
  if (!type && !object) {
    logger.warn({
      source: 'vk',
      event: 'unknown_payload',
      request_id: req.requestId,
      summary: 'VK payload without type/object',
      payload: body
    });
    return res.status(200).send('ok');
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
  if (String(group_id) != String(VK_GROUP_ID) || (VK_SECRET_KEY && secret !== VK_SECRET_KEY)) {
    logError('vk', 'auth', new Error('bad secret or group id'), { payload: body });
    return res.status(403).end('forbidden');
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
  if (type === 'confirmation') {
    const code = process.env.VK_CONFIRMATION_STRING || 'confirmation-code';
    // VK —Ç—Ä–µ–±—É–µ—Ç –æ–±—ã—á–Ω—É—é —Å—Ç—Ä–æ–∫—É, –Ω–µ JSON
    return res.status(200).send(code);
  }

  try {
    // –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞ —Å–ª—É—á–∞–π —Ä–µ—Ç—Ä–∞–µ–≤
    if (shouldProcessEvent(body)) {
      await handleVkEvent(type, object, { full: body, requestId: req.requestId });
      rememberEvent(body);
    }
    return res.status(200).send('ok');
  } catch (err) {
    logError('vk', type || 'webhook', err, { payload: body });
    return res.status(500).end('error');
  }
}

// VK webhook (–Ω–æ–≤—ã–π –ø—É—Ç—å)
app.post('/vk', logMiddlewareVK(), vkWebhookHandler);
// –û—Å—Ç–∞–≤–∏–º –∏ —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
app.post('/webhook', logMiddlewareVK(), vkWebhookHandler);

// –°—Ç–∞—Ä—Ç
const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
  logger.info({
    source: 'system',
    event: 'boot',
    summary: `Bot v${BOT_VERSION} started`,
    payload: { port: PORT }
  });

  if (DEBUG_CHAT_ID) {
    try {
      await sendTelegramMessageWithRetry(
        DEBUG_CHAT_ID,
        `üü¢ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n–í–µ—Ä—Å–∏—è: ${BOT_VERSION}\n–ü–æ—Ä—Ç: ${PORT}\n–í—Ä–µ–º—è: ${new Date().toISOString()}`
      );
    } catch (err) {
      logError('system', 'notify_startup', err, { chat_id: DEBUG_CHAT_ID });
    }
  }

  console.log(`[server] Bot v${BOT_VERSION} listening on ${PORT}`);
});
